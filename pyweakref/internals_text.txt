# This module is private. Do not import directly from here

if __name__ == "__main__":
    source = open("internals_source.py", "r")
    text = open("internals_text.txt", "w")
    source_code = source.read()
    print("Exporting", len(source_code), "characters of source code...")
    text.write(source_code)
    source.close()
    text.close()
    
import array
import _collections_abc
import gc
import threading
import sys
import types
import typing
import sys

def _callback(ref):
    return _reference_registry[id(ref)][1]

### Internals ###
# Marker for _get_circular_ref_count
_circular_ref_marker = object()

# Whitelist for _get_circular_ref_count
_circular_ref_whitelist = (
    # builtins
    bool, bytearray, bytes, complex, float, int, memoryview,
    object, range, slice, str, type(None), type(NotImplemented), type(Ellipsis), 
    # types
    types.BuiltinFunctionType, types.BuiltinMethodType,
    types.GetSetDescriptorType, types.MemberDescriptorType, types.MethodWrapperType, 
    types.WrapperDescriptorType,types.ClassMethodDescriptorType, types.CodeType, types.FrameType,
    # array
    array.array,
    # _collections_abc
    _collections_abc.bytes_iterator, _collections_abc.bytearray_iterator, _collections_abc.longrange_iterator,
    _collections_abc.range_iterator, _collections_abc.str_iterator
)

def _get_circular_ref_count(obj, data=_circular_ref_marker, memo=None):

    ## Pre-examination checks, base cases ##

    # Because data is a (perhaps indirect) reference of
    # obj, when invoked recursively by this function,
    # if data is obj we have discovered a circular reference. 
    # Return 1.
    if data is obj:
        return 1

    # When invoked with only 1 argument (in _get_threshold),
    # a marker prevents an automatic return of 1. Now the
    # marker's purpose if fulfilled, set data to obj.
    if data is _circular_ref_marker:
        data = obj

    # Some instances are built-in types are known not 
    # to contain any references of obj. If so, save
    # precious time and return 0.
    if type(data) in _circular_ref_whitelist:
        return 0

    # Memo is set to None when invoked with 1 argument.
    # If so, set memo to an empty list (which can't be
    # corrupted).
    if memo is None:
        memo = []

    # Sometimes, we have already examined an object. All
    # of its references to obj have been exposed. Return 0,
    # there are no more left to expose.
    if data in memo:
        return 0

    ## Preperation for examination of the data ##

    # Add data to memo. This prevents us from examining 
    # the data more than once.
    memo.append(data)

    ## Reduction of data. 

    # Tweak some types
    
    # Cells are unpicklable, so...
    if isinstance(data, types.CellType):
        return _get_circular_ref_count(obj, data.cell_contents, memo)   
    # Types are unpicklable so...
    if isinstance(data, type):
        return sum([_get_circular_ref_count(obj, cls.__dict__, memo) for cls in type(data).mro(data)])
    # Coroutines are unpicklable so...
    if isinstance(data, types.CoroutineType):
        return _get_circular_ref_count(obj, data.cr_await, memo)
    # Generators are unpickable so...
    if isinstance(data, types.GeneratorType):
        return _get_circular_ref_count(obj, data.gi_yieldfrom, memo)
    if isinstance(data, types.AsyncGeneratorType):
        return _get_circular_ref_count(obj, data.ag_await,  memo)
    # Functions are unpicklable so...
    if isinstance(data, types.FunctionType):
        return sum([_get_circular_ref_count(obj, getattr(data, name)) for name in [
            "__annotations__", "__dict__", "__defaults__", "__kwdefaults__", 
        ]])
    # MappingProxyType is unpicklable, so...
    if isinstance(data, types.MappingProxyType):
        data = dict(data)
    # Tuples reduce into themselves, so...
    if isinstance(data, tuple):
        data = list(data) 

    # Reduce the data using __reduce_ex__ with the 4th protocol.
    # Inform the client if reduction doesn't work           
    try:     
        rv = data.__reduce_ex__(4)
    except Exception:
        raise TypeError(f"Cannot reduce {repr(obj)}")

    # Get the arguments for __new__, state, list iterator and
    # dict item iterator from the reduced data
    args = rv[1]
    state = listiter = dictitemiter = None
    if len(rv) > 2:
        state = rv[2]
    if len(rv) > 3:
        listiter = rv[3]
    if len(rv) > 4:
        dictitemiter = rv[4]

    # Circular reference counter
    counter = 0

    ## __new__ arguments ##
    # Recursively call this function with arg substituting data
    # for every argument for the rebuilder (excluding the 
    # 1st argument if it is type(data). Add the results to the counter.    
    if args[0] is not type(data):
        counter += _get_circular_ref_count(obj, args[0], memo)
    for arg in args[1:]:
        counter += _get_circular_ref_count(obj, arg, memo)

    ## state ##
    # Recursively call this function for this state. 
    # Add the results to the counter.
    if state is not None:
        counter += _get_circular_ref_count(obj, state, memo)

    ## list iterator ##
    # Recursively call this function for every item in the list
    # iterator. Add the results to the counter.
    if listiter is not None:
        for item in listiter:
            counter += _get_circular_ref_count(obj, item, memo)

    ## dict item iterator ##
    # Recursively call this function for every key and value in
    # the dict item iterator. Add the results to the counter.
    if dictitemiter is not None:
        for key, value in dictitemiter:
            counter += _get_circular_ref_count(obj, key, memo)
            counter += _get_circular_ref_count(obj, value, memo)

    # We're done! Return the counter.
    return counter


def _get_threshold(obj):

    # Return the number of the object's circular
    # references + the number of pyweakrefs.
    c = circular_reference_count(obj) 
    d = get_pyweakref_count(obj)
    return c + d

def _is_eligible(obj):
    cls = type(obj)
    if cls is type:
        return True
    if isinstance(cls.__dict__.get("__pyweakref__", None), ReferenceDescriptor):
        return True
    return isinstance(cls.__dict__.get('__weakref__', None), types.GetSetDescriptorType)

# Whether purging is enabled. Starts off as False
# Enabled by loader.
_purge = False

def _purge_func(chain=True):

    # Number of weak references purged
    purged = 0

    # For every (id, ref) pair in the registry,
    # check if the number of references of ref()
    # is less or equal to the threshold for purging.
    # If so, purge the reference and add 1 to purged.
    #
    # To purge an reference means to delete it from
    # the registry and make it reference None instead
    # of its object. 
    # 
    # The object is then garbage collected (see below).
    for id_, ref_list in tuple(_reference_id_registry.items()):
        if not ref_list:
            continue
        ref = ref_list[0]
        obj = ref()
        count = sys.getrefcount(obj) - 2
        threshold = _get_threshold(obj)
        if count <= threshold:
            for ref in ref_list:
                if callable(ref.__callback__):
                    ref.__callback__.__call__(ref)
                _reference_registry[id(ref)] = None, None
            purged += 1
            del _reference_id_registry[id(obj)] 

    # If a reference has been purged, run the garbage
    # collector now.
    if purged:
        gc.collect()

    # If purging has been enabled and the chain parameter is
    # True, then we schedule a call of this function in 5
    # seconds.
    if purging() and chain:
        global _purge_thread
        _purge_thread = threading.Timer(5.0, _purge_func)
        _purge_thread.start()        

# The purge thread (technically a timer). Starts at None,
# initialized and updated when purging is enabled.
_purge_thread = None 

# The type of ReferenceDescriptor's __doc__ attribute. ReferenceDescriptor's
# __doc__ displays one message without an instance and another with an instance.
# This is impossible without another descriptor (property uses 
# types.MemberDescriptorType for example, but we can't instantiate it).

class _reference_descriptor_doc_type(object):

    def __get__(self, instance, owner=None):
        "Return an attribute of instance, which is of type owner."
        if instance is None:
            # Result of ReferenceDescriptor.__doc__ 
            return """
            Descriptor which allows a pyweakref.ref to instances of a class,
            without using __weakref__

            A class should be register()ed. It is bad programming practice to
            'register' a class without using register()"""
        else:
            # Result of r.__doc__ where isinstance(r, ReferenceDescriptor)
            return "list to the pure python weak references of the object"

    __slots__ = ()
    
def _referent(ref):
    return _reference_registry[id(ref)][0]

def _proxied(proxy):
    return _referent(_proxy_registry[id(proxy)])

def _proxy_callback(proxy):
    return _callback(_proxy_registry[id(proxy)])

## Registries ##

# proxy -> ref
_proxy_registry = {}

# id -> ref
_reference_id_registry = {}

# ref -> (referent, callback)
_reference_registry = {}


### Start of public API ###

__name__ = "pyweakref.support"

class CallableProxy(object):
    """CallableProxyType(obj) -> callable weak proxy to obj.
    
    A callable weak proxy is not hashable no matter what, 
    because of its mutable nature.
    
    Besides these differences it is equivalent to obj,
    including the __class__ attribute. Passing a callable
    weak proxy into type() will still yield the proxy's
    type, not obj's type.
    
    """
    
    def __call__(self, *args, **kwds):
        return _proxied.__call__(*args, **kwds)
    
    @property
    def __callback__(self):
        return _proxy_callback(self)
    
    @property
    def __class__(self):
        return _proxied(self).__class__
    
    def __getattribute__(self, name):
        try:
            return _proxied(self).__getattribute__(name)
        except:
            return object.__getattribute__(self, name)
    
    def __hash__(self):
        raise TypeError("unhashable object")
    
    def __new__(cls, obj, callback):
        ref = ReferenceType(obj, callback)
        self = object.__new__(cls)
        _proxy_registry[id(obj)] = ref
        return self
    
    def __repr__(self):
        return f"<{type(self).__module__}.{type(self).__qualname__} object at 0x{hex(id(self))[2:].upper()}" \
               + f", to <{type(_proxied(self)).__name__} object at 0x{hex(id(_proxied(self)))[2:].upper()}>>"    
    
    __slots__ = ()      

class Proxy(object):
    """ProxyType(obj) -> normal weak proxy to obj.
    
    A normal weak proxy is not hashable no matter what, 
    because of its mutable nature nor is it callable.
    
    Besides these differences it is equivalent to obj,
    including the __class__ attribute. Passing a normal
    weak proxy into type() will still yield the proxy's
    type, not obj's type.
    """
    
    @property
    def __callback__(self):
        return _proxy_callback(self)
    
    @property
    def __class__(self):
        if sys._getframe(1).f_globals is globals():
            return type(self)
        return _proxied(self).__class__
    
    def __getattribute__(self, name):
        try:
            return object.__getattribute__(self, name) 
        except:
            return type(_proxied(self)).__getattribute__(name)
              
    
    def __hash__(self):
        raise TypeError("unhashable object")
    
    def __new__(cls, obj, callback):
        ref = ReferenceType(obj, callback)
        self = object.__new__(cls)
        _proxy_registry[id(self)] = ref
        return self
    
    def __repr__(self):
        return f"<{type(self).__module__}.{type(self).__qualname__} object at 0x{hex(id(self))[2:].upper()}" \
               + f", to <{type(_proxied(self)).__name__} object at 0x{hex(id(_proxied(self)))[2:].upper()}>>"    
    
    __slots__ = ()

class Reference(object):
    """ReferenceType(obj) -> weak reference to obj.

    Calling the weak reference will get its object.
    A weak reference does not protect its object from garbage
    collection (unless purging is disabled). 

    type(obj), or a superclass,  must be register()ed. 
    Otherwise, TypeError is raised."""

    def __bool__(self):
        "Return bool(self)."
        # Return False if self is dead, True otherwise
        return self() is not None

    def __call__(self):
        "Implement self()."
        # Return self's object
        return _referent(self)
    
    @property
    def __callback__(self):
        return _callback(self)

    def __eq__(self, other):
        "Return self==other"
        if not isinstance(other, Reference):
            return NotImplemented
        return self() == other()

    def __hash__(self):
        "Return hash(self)."
        # Return the hash value of self's object
        return hash(self())

    def __ne__(self):
        "Return self==other"
        if not isinstance(other, Reference):
            return NotImplemented
        return not (self == other)

    def __new__(cls, obj, callback=None):
        "Create and return a new object.  See help(type) for accurate signature."
        # Check if type(obj) is register()ed
        if not _is_eligible(obj):
            message = "Cannot use pyweakref.ref for class {0.__module__}.{0.__qualname__} instances".format(type(obj))
            raise TypeError(message)
        # Create a new pyweakref...
        self = object.__new__(cls)
        # ...set its object and callback..
        _reference_registry[id(self)] = obj, callback
        # ...add it to the registry...
        _reference_id_registry.setdefault(id(obj), [])
        _reference_id_registry[id(obj)].append(self)
        # ...and return it. Whew!
        return self

    def __repr__(self):
        "Return repr(self)."
        base = f"<pyweakref at 0x{hex(id(self))[2:].upper()}, "
        if self:
            return base \
                   + f"to <{type(self()).__module__}.{type(self()).__qualname__} " \
                   + f"object at 0x{hex(id(self()))[2:].upper()}>>"
        else:
            return base + "dead>"

    __slots__ = () 
    
class ReferenceDescriptor(object):
    # Set its doc to an instance of 
    # _reference_descriptor_doc_type
    __doc__ = _reference_descriptor_doc_type()

    def __get__(self, instance, owner=None):
        "Return an attribute of instance, which is of type owner."
        if instance is None:
            return self
        return get_pyweakref(instance)        

    __slots__ = ()

def circular_reference_count(obj: typing.Any) -> int:
    """Return the number of circular references to the object.
    """
    return _get_circular_ref_count(obj)

def disable_purging():
    """Disable purging.

    Without purging, pyweakref.ref instances will not be weak references,
    rather strong references. Think twice before calling this function."""
    global _purge, _purge_thread
    if purging():
        _purge = False
        _purge_thread.cancel()

def enable_purging():
    """Enable purging.

    Only with purging, pyweakref.ref instances will be weak references,
    not strong references."""
    global _purge, _purge_thread
    if not purging():
        _purge = True
        _purge_thread = threading.Timer(5.0, _purge_func)
        _purge_thread.start()
        
def get_pyweakref_count(obj) -> int:
    "Return number of pyweakrefs to obj."
    return len(get_pyweakrefs(obj))
        
def get_pyweakrefs(obj) -> list[Reference]:
    """Return all pyweakrefs to obj. If none, return None"""
    seq = _reference_id_registry.get(id(obj), [])
    return [seq[0] for item in seq]

def get_proxy_pyweakref(proxy) -> Reference:
    """Return the pyweakref associated with the proxy.
    
    From the pyweakref, the client may access the proxy's
    object and callback.
    """
    return _proxy_registry[id(proxy)]


def purge():
    """Run a purge cycle right now.

    Automatic purging will not be enabled if currently disabled.
    """
    _purge_func(False)


def purging() -> bool:
    """Return if purging is enabled.

    Without purging, pyweakref.ref instances will not be weak references,
    rather strong references."""
    return _purge